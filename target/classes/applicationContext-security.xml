<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/security
                           http://www.springframework.org/schema/security/spring-security.xsd">

    <!--http://localhost:8080/SpringMvcRestSecurityExmaple/rest/products/getProductsList?j_username=admin&j_password=admin-->
    <context:annotation-config/>
	<context:component-scan base-package="com.esko" />
    <security:global-method-security
            secured-annotations="enabled"
            jsr250-annotations="enabled"
            pre-post-annotations="enabled"
            access-decision-manager-ref="accessDecisionManager">
    </security:global-method-security>

    <!-- Disable security on static resources -->
    <security:http request-matcher="regex" pattern="/index.jsp" security="none"/>
    <security:http request-matcher="regex" pattern="/favicon.ico" security="none"/>
    <security:http request-matcher="regex" pattern="/css/*.css" security="none"/>
    <security:http request-matcher="regex" pattern="/js/*.js" security="none"/>


    <!-- Security configuration for REST services. -->
    <security:http pattern="/Controller/**"
                   auto-config="true"
                   use-expressions="true"
                   authentication-manager-ref="authenticationManager"
                   entry-point-ref="ldapServicesEntryPoint"
                   create-session="always">
        <security:http-basic entry-point-ref="ldapServicesEntryPoint" />

        <security:csrf disabled="true"/>
   	
        <security:custom-filter ref="ldapServicesFilter"
                                before="PRE_AUTH_FILTER"/>

        <security:intercept-url pattern="/css/*.css" access="permitAll"/>
        <security:intercept-url pattern="/js/*.js" access="permitAll"/>
        
        <!-- Login Controller api -->
        <security:intercept-url pattern="/Controller/loginController/login" access="hasAnyRole('ROLE_ADMIN','ROLE_MANAGER','ROLE_ASSOCIATE')"/>
        <security:intercept-url pattern="/Controller/loginController/Employee" access="hasAnyRole('ROLE_ADMIN')"/>
        
        <!-- Department Controller api-->
        <security:intercept-url pattern="/Controller/departmentController/DepartmentDetails" access="hasAnyRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/Controller/departmentController/addDepartmentRow" access="hasAnyRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/Controller/departmentController/deleteDepartmentRow" access="hasAnyRole('ROLE_ADMIN')"/>
        
        <!-- Holiday Controller api -->
        <security:intercept-url pattern="/Controller/holidayController/holidayDetails" access="hasAnyRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/Controller/holidayController/addCalendarRow" access="hasAnyRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/Controller/holidayController/editCalendarRow" access="hasAnyRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/Controller/holidayController/deleteCalendarRow" access="hasAnyRole('ROLE_ADMIN')"/>
        
        <!-- Master Controller api -->
        <security:intercept-url pattern="/Controller/masterController/EmployeeDetails" access="hasAnyRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/Controller/masterController/addEmployee" access="hasAnyRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/Controller/masterController/updateEmployee" access="hasAnyRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/Controller/masterController/deleteEmployee" access="hasAnyRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/Controller/masterController/Manager" access="hasAnyRole('ROLE_ADMIN')"/>
        
        <!-- Spandana Controller api -->
        <security:intercept-url pattern="/Controller/spandanaController/Leave" access="hasAnyRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/Controller/spandanaController/Attendance" access="hasAnyRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/Controller/spandanaController/Master" access="hasAnyRole('ROLE_ADMIN')"/>
        
        <!-- Report Controller api -->
        <security:intercept-url pattern="/Controller/reportController/employeeRecords" access="hasAnyRole('ROLE_ADMIN','ROLE_MANAGER')"/>
        <security:intercept-url pattern="/Controller/reportController/generateReport/{fileType}" access="hasAnyRole('ROLE_ADMIN','ROLE_MANAGER')"/>
        <security:intercept-url pattern="/Controller/reportController/getCSV" access="hasAnyRole('ROLE_ADMIN','ROLE_MANAGER')"/>
        <security:intercept-url pattern="/Controller/reportController/getPDF" access="hasAnyRole('ROLE_ADMIN','ROLE_MANAGER')"/>
        
        <!--NotIN Office Controller api -->
            
        <security:intercept-url pattern="/Controller/notInOfficeController/userDetails" access="hasAnyRole('ROLE_ADMIN','ROLE_MANAGER','ROLE_ASSOCIATE')"/>
 		<security:intercept-url pattern="/Controller/notInOfficeController/leaveDetails" access="hasAnyRole('ROLE_ADMIN','ROLE_ASSOCIATE','ROLE_MANAGER')"/>
 		<security:intercept-url pattern="/Controller/notInOfficeController/workFromHomeList" access="hasAnyRole('ROLE_ADMIN','ROLE_ASSOCIATE','ROLE_MANAGER')"/>
 		<security:intercept-url pattern="/Controller/notInOfficeController/addNotInOffice" access="hasAnyRole('ROLE_ADMIN','ROLE_MANAGER','ROLE_ASSOCIATE')"/>
 		<security:intercept-url pattern="/Controller/notInOfficeController/notInOfficeDetails" access="hasAnyRole('ROLE_ADMIN','ROLE_MANAGER','ROLE_ASSOCIATE')"/>
 		<security:intercept-url pattern="/Controller/notInOfficeController/cancelRequest" access="hasAnyRole('ROLE_ADMIN','ROLE_MANAGER','ROLE_ASSOCIATE')"/>
 		<security:intercept-url pattern="/Controller/notInOfficeController/pendingRequests" access="hasAnyRole('ROLE_ADMIN','ROLE_MANAGER','ROLE_ASSOCIATE')"/>
 		<security:intercept-url pattern="/Controller/notInOfficeController/approveRequest" access="hasAnyRole('ROLE_ADMIN','ROLE_MANAGER')"/>
        
        
          <!--Authorization Controller api -->
           <security:intercept-url pattern="/Controller/authorizationController/{role}" access="hasAnyRole('ROLE_ADMIN','ROLE_MANAGER','ROLE_ASSOCIATE')"/>
        
        <!-- Adds a logout filter to Spring Security filter chain -->
        <security:logout logout-url="/Controller/loginController/Logout"
                         delete-cookies="true"
                         invalidate-session="true"
                         success-handler-ref="ldapLogoutSuccessHandler"/>

        <security:access-denied-handler  ref="accessDeniedHandler"/>

    </security:http>

 <!-- Entry point for REST service. -->
    <bean id="ldapServicesEntryPoint"
          class="com.esko.Security.LdapAuthenticationEntryPoint"/>

    <!-- Filter for REST services. -->
    <bean id="ldapServicesFilter"
          class="com.esko.Security.LdapUsernamePasswordAuthenticationFilter">
        <property name="postOnly" value="false"/>
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="authenticationFailureHandler" ref="ldapAuthenticationFailureHandler"/>
        <property name="authenticationSuccessHandler" ref="ldapAuthenticationSuccessHandler"/>
     	<property name="filterProcessesUrl" value="Controller/loginController/login"/>
        <property name="usernameParameter" value="username"/>
        <property name="passwordParameter" value="password"/>
    </bean>

    <bean id="accessDeniedHandler" class="com.esko.Security.AccessDeniedHandler"/>

    <!-- Configures a custom authentication success handler that returns HTTP status code 200 -->
    <bean id="ldapAuthenticationSuccessHandler"
          class="com.esko.Security.LdapAuthenticationSuccessHandler">
        <property name="alwaysUseDefaultTargetUrl" value="true"/>
        <property name="defaultTargetUrl" value="/Controller/loginController/login"/>
    </bean>

    <!-- Configures a custom authentication failure handler that returns HTTP status code 401 -->
    <bean id="ldapAuthenticationFailureHandler"
          class="com.esko.Security.LdapAuthenticationFailureHandler" />

    <!-- Configures a custom logout success handler that returns HTTP status code 200 -->
    <bean id="ldapLogoutSuccessHandler"
          class="com.esko.Security.LdapLogoutSuccessHandler"/>

    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <constructor-arg name="decisionVoters">
            <list>
                <bean class="org.springframework.security.access.vote.RoleVoter">
                    <property name="rolePrefix" value="*"/>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
        <constructor-arg name="authenticationEntryPoint" ref="ldapServicesEntryPoint"/>
    </bean>
    
    <bean id="LdapAuthServiceImpl" class="com.esko.Security.LdapAuthServiceImpl"/>
    
     <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="LdapAuthServiceImpl" />
    </security:authentication-manager>

</beans>